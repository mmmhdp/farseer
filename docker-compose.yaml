services:
  api:
    build: ./src/api/    
    image: mmmhdp/farseer_api:v0
    ports:
      - "8000:8000" 
    env_file:
       ./src/api/.prod.env
    depends_on:
      kafka:
        condition: service_healthy
      api-redis:
        condition: service_started
      fsm-stenographer:
        condition: service_started
      runner:
        condition: service_started
    profiles: ["api","all"]
 

  api-redis:
    image: redis
    ports:
      - "6379:6379"
    restart: always
    command: /bin/sh -c "redis-server --requirepass $$REDIS_HOST_PASSWORD"
    env_file:
          - ./src/api/.prod.env
    depends_on:
      kafka:
        condition: service_healthy
    profiles: ["infr","all","api-db"]
    

  fsm-stenographer:
    build: ./src/fsm_stenographer/    
    image: mmmhdp/farseer_fsm_stenographer:v0
    ports:
      - "5555:5555" 
    env_file:
       ./src/fsm_stenographer/.prod.env
    depends_on:
      fsm-st-postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    profiles: ["fsm-st","all"]


  fsm-st-postgres:
    image: postgres:latest
    ports:
      - "5432:5432" 
    environment:
      - POSTGRES_PASSWORD=Qq220605
      - POSTGRES_USER=nikita
      - POSTGRES_DB=crud_db 
      - PGDATABASE=crud_db
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test:  ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 1s
      timeout: 1s
      retries: 10
    profiles: ["infr","all","fsm-post"]


  runner:
    build: ./src/runner/ 
    image: mmmhdp/farseer_runner:v0
    ports:
      - "6666:6666" 
    env_file:
       ./src/runner/.prod.env
    depends_on:
      kafka:
        condition: service_healthy
      runner-redis:
        condition: service_started
      img-minio:
        condition: service_started
    profiles: ["runner"] #,"all"]
  
  runner-redis:
    image: redis
    ports:
      - "6380:6379"
    restart: always
    command: /bin/sh -c "redis-server --requirepass $$REDIS_HOST_PASSWORD"
    env_file:
          - ./src/runner/.prod.env
    depends_on:
      kafka:
        condition: service_healthy
    profiles: ["infr","all"]
  
  inference:
    build: ./src/inference/ 
    image: mmmhdp/farseer_inference:v0
    ports:
      - "7777:7777" 
    env_file:
       ./src/inference/.prod.env
    depends_on:
      kafka:
        condition: service_healthy
      inference-redis:
        condition: service_started
      img-minio:
        condition: service_started
    profiles: ["inference","all"]
  
  inference-redis:
    image: redis
    ports:
      - "6381:6379"
    restart: always
    command: /bin/sh -c "redis-server --requirepass $$REDIS_HOST_PASSWORD"
    env_file:
          - ./src/inference/.prod.env
    depends_on:
      kafka:
        condition: service_healthy
    profiles: ["infr","all"]
  
  img-minio:
    image: minio/minio
    ports:
      - "9000:9000"
    restart: always
    command: server /data --console-address ":9001"
    env_file:
          - ./src/runner/.prod.env
    depends_on:
      kafka:
        condition: service_healthy
    profiles: ["infr", "minio", "all"]
  
  api-message-relay:
    build: ./src/api_fsm_st_msg_relay_srvs/ 
    image: mmmhdp/farseer_api_fsm_st_msg_relay_srvs:v0
    ports:
      - "8888:8888" 
    env_file:
       ./src/api_fsm_st_msg_relay_srvs/.prod.env
    depends_on: 
      kafka:
        condition: service_healthy
      api-redis:
        condition: service_started
      fsm-st-postgres:
        condition: service_started
      inference-redis:
        condition: service_started
    profiles: ["outbox", "all"]

  kafka:
    image: confluentinc/cp-kafka
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092, PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
        test: nc -z localhost 9092 || exit -1
        start_period: 15s
        interval: 1s
        timeout: 1s
        retries: 10
    profiles: ["infr","all"]
  
  zookeeper:
    image: confluentinc/cp-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    profiles: ["infr","all"]
